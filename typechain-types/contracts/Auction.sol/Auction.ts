/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Auction {
  export type AuctionItemStruct = {
    seller: PromiseOrValue<string>;
    nftTokenId: PromiseOrValue<BigNumberish>;
    highestBidder: PromiseOrValue<string>;
    highestBid: PromiseOrValue<BigNumberish>;
    startPrice: PromiseOrValue<BigNumberish>;
    buyNowPrice: PromiseOrValue<BigNumberish>;
    startedAt: PromiseOrValue<BigNumberish>;
    endAt: PromiseOrValue<BigNumberish>;
    canceled: PromiseOrValue<boolean>;
  };

  export type AuctionItemStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    seller: string;
    nftTokenId: BigNumber;
    highestBidder: string;
    highestBid: BigNumber;
    startPrice: BigNumber;
    buyNowPrice: BigNumber;
    startedAt: BigNumber;
    endAt: BigNumber;
    canceled: boolean;
  };
}

export interface AuctionInterface extends utils.Interface {
  functions: {
    "auctions(uint256)": FunctionFragment;
    "bid(uint256)": FunctionFragment;
    "bidList(uint256,address)": FunctionFragment;
    "buyNow(uint256)": FunctionFragment;
    "cancelAuction(uint256)": FunctionFragment;
    "contractAddress()": FunctionFragment;
    "createAuction(uint256,uint256,uint256)": FunctionFragment;
    "endAuction(uint256)": FunctionFragment;
    "getAuction(uint256)": FunctionFragment;
    "getAuctionList()": FunctionFragment;
    "getCurrentAuctionId()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerCut()": FunctionFragment;
    "refundBid(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "auctions"
      | "bid"
      | "bidList"
      | "buyNow"
      | "cancelAuction"
      | "contractAddress"
      | "createAuction"
      | "endAuction"
      | "getAuction"
      | "getAuctionList"
      | "getCurrentAuctionId"
      | "owner"
      | "ownerCut"
      | "refundBid"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "auctions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "bid",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "bidList",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "buyNow",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAuction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "contractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createAuction",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "endAuction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentAuctionId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "ownerCut", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refundBid",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bidList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyNow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endAuction", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAuction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentAuctionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerCut", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refundBid", data: BytesLike): Result;

  events: {
    "AuctionBid(uint256,address,uint256)": EventFragment;
    "AuctionBuyNow(uint256,address,uint256)": EventFragment;
    "AuctionCanceled(uint256,address,uint256)": EventFragment;
    "AuctionCreated(uint256,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "AuctionEnded(uint256,address,uint256)": EventFragment;
    "BidderWithdraw(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionBuyNow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidderWithdraw"): EventFragment;
}

export interface AuctionBidEventObject {
  auctionId: BigNumber;
  bidder: string;
  bid: BigNumber;
}
export type AuctionBidEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  AuctionBidEventObject
>;

export type AuctionBidEventFilter = TypedEventFilter<AuctionBidEvent>;

export interface AuctionBuyNowEventObject {
  auctionId: BigNumber;
  buyer: string;
  bid: BigNumber;
}
export type AuctionBuyNowEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  AuctionBuyNowEventObject
>;

export type AuctionBuyNowEventFilter = TypedEventFilter<AuctionBuyNowEvent>;

export interface AuctionCanceledEventObject {
  auctionId: BigNumber;
  seller: string;
  nftTokenId: BigNumber;
}
export type AuctionCanceledEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  AuctionCanceledEventObject
>;

export type AuctionCanceledEventFilter = TypedEventFilter<AuctionCanceledEvent>;

export interface AuctionCreatedEventObject {
  auctionId: BigNumber;
  seller: string;
  nftTokenId: BigNumber;
  startPrice: BigNumber;
  buyNowPrice: BigNumber;
  startedAt: BigNumber;
  endAt: BigNumber;
}
export type AuctionCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  AuctionCreatedEventObject
>;

export type AuctionCreatedEventFilter = TypedEventFilter<AuctionCreatedEvent>;

export interface AuctionEndedEventObject {
  auctionId: BigNumber;
  winner: string;
  amount: BigNumber;
}
export type AuctionEndedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  AuctionEndedEventObject
>;

export type AuctionEndedEventFilter = TypedEventFilter<AuctionEndedEvent>;

export interface BidderWithdrawEventObject {
  auctionId: BigNumber;
  bidder: string;
  bid: BigNumber;
}
export type BidderWithdrawEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  BidderWithdrawEventObject
>;

export type BidderWithdrawEventFilter = TypedEventFilter<BidderWithdrawEvent>;

export interface Auction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AuctionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    auctions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        seller: string;
        nftTokenId: BigNumber;
        highestBidder: string;
        highestBid: BigNumber;
        startPrice: BigNumber;
        buyNowPrice: BigNumber;
        startedAt: BigNumber;
        endAt: BigNumber;
        canceled: boolean;
      }
    >;

    bid(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bidList(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buyNow(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelAuction(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contractAddress(overrides?: CallOverrides): Promise<[string]>;

    createAuction(
      _nftTokenId: PromiseOrValue<BigNumberish>,
      _startPrice: PromiseOrValue<BigNumberish>,
      _buyNowPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    endAuction(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAuction(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Auction.AuctionItemStructOutput]>;

    getAuctionList(
      overrides?: CallOverrides
    ): Promise<[Auction.AuctionItemStructOutput[]]>;

    getCurrentAuctionId(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerCut(overrides?: CallOverrides): Promise<[BigNumber]>;

    refundBid(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  auctions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      seller: string;
      nftTokenId: BigNumber;
      highestBidder: string;
      highestBid: BigNumber;
      startPrice: BigNumber;
      buyNowPrice: BigNumber;
      startedAt: BigNumber;
      endAt: BigNumber;
      canceled: boolean;
    }
  >;

  bid(
    _auctionId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bidList(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buyNow(
    _auctionId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelAuction(
    _auctionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contractAddress(overrides?: CallOverrides): Promise<string>;

  createAuction(
    _nftTokenId: PromiseOrValue<BigNumberish>,
    _startPrice: PromiseOrValue<BigNumberish>,
    _buyNowPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  endAuction(
    _auctionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAuction(
    _auctionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Auction.AuctionItemStructOutput>;

  getAuctionList(
    overrides?: CallOverrides
  ): Promise<Auction.AuctionItemStructOutput[]>;

  getCurrentAuctionId(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerCut(overrides?: CallOverrides): Promise<BigNumber>;

  refundBid(
    _auctionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    auctions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        seller: string;
        nftTokenId: BigNumber;
        highestBidder: string;
        highestBid: BigNumber;
        startPrice: BigNumber;
        buyNowPrice: BigNumber;
        startedAt: BigNumber;
        endAt: BigNumber;
        canceled: boolean;
      }
    >;

    bid(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    bidList(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyNow(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelAuction(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    contractAddress(overrides?: CallOverrides): Promise<string>;

    createAuction(
      _nftTokenId: PromiseOrValue<BigNumberish>,
      _startPrice: PromiseOrValue<BigNumberish>,
      _buyNowPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    endAuction(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAuction(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Auction.AuctionItemStructOutput>;

    getAuctionList(
      overrides?: CallOverrides
    ): Promise<Auction.AuctionItemStructOutput[]>;

    getCurrentAuctionId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerCut(overrides?: CallOverrides): Promise<BigNumber>;

    refundBid(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AuctionBid(uint256,address,uint256)"(
      auctionId?: PromiseOrValue<BigNumberish> | null,
      bidder?: null,
      bid?: null
    ): AuctionBidEventFilter;
    AuctionBid(
      auctionId?: PromiseOrValue<BigNumberish> | null,
      bidder?: null,
      bid?: null
    ): AuctionBidEventFilter;

    "AuctionBuyNow(uint256,address,uint256)"(
      auctionId?: PromiseOrValue<BigNumberish> | null,
      buyer?: null,
      bid?: null
    ): AuctionBuyNowEventFilter;
    AuctionBuyNow(
      auctionId?: PromiseOrValue<BigNumberish> | null,
      buyer?: null,
      bid?: null
    ): AuctionBuyNowEventFilter;

    "AuctionCanceled(uint256,address,uint256)"(
      auctionId?: PromiseOrValue<BigNumberish> | null,
      seller?: null,
      nftTokenId?: null
    ): AuctionCanceledEventFilter;
    AuctionCanceled(
      auctionId?: PromiseOrValue<BigNumberish> | null,
      seller?: null,
      nftTokenId?: null
    ): AuctionCanceledEventFilter;

    "AuctionCreated(uint256,address,uint256,uint256,uint256,uint256,uint256)"(
      auctionId?: PromiseOrValue<BigNumberish> | null,
      seller?: null,
      nftTokenId?: null,
      startPrice?: null,
      buyNowPrice?: null,
      startedAt?: null,
      endAt?: null
    ): AuctionCreatedEventFilter;
    AuctionCreated(
      auctionId?: PromiseOrValue<BigNumberish> | null,
      seller?: null,
      nftTokenId?: null,
      startPrice?: null,
      buyNowPrice?: null,
      startedAt?: null,
      endAt?: null
    ): AuctionCreatedEventFilter;

    "AuctionEnded(uint256,address,uint256)"(
      auctionId?: PromiseOrValue<BigNumberish> | null,
      winner?: null,
      amount?: null
    ): AuctionEndedEventFilter;
    AuctionEnded(
      auctionId?: PromiseOrValue<BigNumberish> | null,
      winner?: null,
      amount?: null
    ): AuctionEndedEventFilter;

    "BidderWithdraw(uint256,address,uint256)"(
      auctionId?: PromiseOrValue<BigNumberish> | null,
      bidder?: null,
      bid?: null
    ): BidderWithdrawEventFilter;
    BidderWithdraw(
      auctionId?: PromiseOrValue<BigNumberish> | null,
      bidder?: null,
      bid?: null
    ): BidderWithdrawEventFilter;
  };

  estimateGas: {
    auctions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bid(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bidList(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyNow(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelAuction(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    createAuction(
      _nftTokenId: PromiseOrValue<BigNumberish>,
      _startPrice: PromiseOrValue<BigNumberish>,
      _buyNowPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    endAuction(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAuction(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionList(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentAuctionId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerCut(overrides?: CallOverrides): Promise<BigNumber>;

    refundBid(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    auctions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bid(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bidList(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyNow(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelAuction(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contractAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createAuction(
      _nftTokenId: PromiseOrValue<BigNumberish>,
      _startPrice: PromiseOrValue<BigNumberish>,
      _buyNowPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    endAuction(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAuction(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentAuctionId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerCut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refundBid(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
